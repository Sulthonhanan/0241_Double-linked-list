#include <iostream>
#include <string>

using namespace std;

struct Node
{
    int noMhs;
    string name;
    Node* next;
    Node* prev;
};

Node* START = NULL;

void addNode() {
    Node* newNode = new Node();  //step 1 : create a new node
    cout << "\nEnter the roll number of the student";
    cin >> newNode-> noMhs;     // assign value to the data field of the new node
    cout << "\nEnter the name of the student";
    cin >> newNode-> Name;      // assign value to the data field of the new node
    

    //Insert the new Node in the list 
    If ( START = NULL || newNode-> noMhs <=  START->noMhs) {
    {   // step 2: insert the new node at the beginning

        if (START != NULL && newNode-> noMhs == START->noMhs)
        {
            cout << "\033[31mDuplicate roll numbers not allowed\033[0m" << endl;
            return;
        }
        //if the list is empty, make the new node the START
        newNode -> next = START;    // step 3 : make the new node point to the first
        if (START |=NULL) 
        {
            START->prev = newNode;  // step 4: make the first node point to the new node
        }
        newNode-> prev = NULL; // step 5: make the new node point to NULL
        START = newNode;       // step 6: make the new node the first node
        
    }
}   
    else
    {
        // insert the new node in the middle or at the end
        Node *current = START; // step 1.a: start from the first node
        Node *previous = NULL; // step 1.b: previous node is NULL initially

        while (current != NULL && current-> noMhs < newNode-> noMhs)
        {                               // step 1.c: traverse the list to find the correct position
            previous = current;         // step 1.d: move the previous to the current node
            current = current->next;    // step 1.e: move the current to the next node
            
        }
        
        newNode->next = current; // step 4: make the next field of the new node point to the new node
        newNode->prev = previous; // step 5: make the previous field of the new node point to previous

        if (current != NULL) 
        {
            current->prev = newNode; //step 6: make the previous field of the current node ppoint to the new node

        }
        if (current ! = NULL)
        {
            previous->next = newNode; // step 7: make the next field of the previous node point to the new node

        }
        else
        {
                    // if the previous is still NULL, it means newNode is now the first node
                    START = newNode;
        }
        
    }
  
    

  

bool search(int rollNo, Node **previous, Node **current)
{

    *previous = NULL;
    *current = START;
    while (*current != NULL && (*current)->noMhs != rollNo)


    {
        *previous = *current;
        *current = (current)->next;
    }
    return (*current != NULL);
}

void deleteNode()
{
        Node *previous, *current; //
        int rollNo;

        cout << "\nEnter the roll number of the student whose record is to be deleted: "; 
        cin >> rollNo; // step 3: get the roll number to be deleted


        if (START = NULL)
    {
        {
        cout << "List is empty" << endl;
        return;
        }
}
        current = START; // step 1: start from the first node 
        previous = NULL;

        // Locate the node to be deleted
        while (current != NULL && current->noMhs I rollNo)
        {
        previous = current;
        current = current->next;
        }

        if (current == NULL)
        {
        cout << "\033[31mThe record with roll number << rollo << not found\033[0" << end 
1;      return;
        }

        // Node to be deleted is the first node
        if (current == START)
        {
        START = START->next; // step 2: update the START pointer 
        if (START != NULL)
    {                       //
        START->prev = NULL; // step
    }
}
else
{       // Node to be deleted is not the first node
        previous->next = current->next;
        if (current->next = NULL)
        { // If there's a successor, update its prev pointer 
        current->next->prev = previous;
        }
    }
}
// Release the memory of the node marked as current
delete current;
cout << "\x1b[32nRecord with roll number " << rollNo << deleted\x1b[Ãªm" << endl;
}

bool listEmpty()
{
return (START == NULL);
}





int main()
{
    while (true)
    {
        try
        {

            cout << "\nMenu" << endl;
            cout << "1. Add a record to the list" << endl;
            cout<<"2. Delete a record from the list" << endl;
            cout<<"3. View all records in the ascending order of roll numbers" << endl;
            cout << "4. View all records in the descending order of roll numbers" << end cout << "5. Search for a record in the list" << endl;
            cout << "6. Exit" << endl;
            cout << "\nEnter your choice (1-6): ";
            char ch;
            cin >> ch;
    switch (ch)
    {
    case '1':
        addNode();
        break;
    case '2':
        deleteNode();
         break;
    case '3':
        traverse();
        break;
    case '4':
        revtraverse();
        break;
    case '5':
        searchData();
        break;
    case '6':
        return 0;
    default:
        cout << "\nInvalid option" << endl; 
        break;

          }
    }
        catch (exception &e)
        {
        cout << "Check for the values entered." << endl;
        }
    }
}
